{"version":3,"sources":["components/common/forms/BaseButtonsForm/BaseButtonsForm.tsx","components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup.tsx","components/profile/profileCard/profileFormNav/nav/notifications/CheckboxColumn/CheckboxColumn.styles.ts","components/profile/profileCard/profileFormNav/nav/notifications/CheckboxColumn/CheckboxColumn.tsx","components/profile/profileCard/profileFormNav/nav/notifications/NotificationsTypes/NotificationsTypes.styles.ts","components/profile/profileCard/profileFormNav/nav/notifications/NotificationsTypes/NotificationsTypes.tsx","components/profile/profileCard/profileFormNav/nav/notifications/Notifications/Notifications.styles.ts","components/profile/profileCard/profileFormNav/nav/notifications/Notifications/Notifications.tsx","pages/NotificationsPage.tsx"],"names":["BaseButtonsForm","form","isFieldsChanged","setFieldsChanged","footer","loading","children","props","BaseForm","useForm","formDefault","currentForm","onCancel","resetFields","Title","BaseFormTitle","Item","BaseFormItem","List","BaseFormList","Provider","BaseButtonsGroup","className","t","useTranslation","gutter","wrap","span","block","type","onClick","htmlType","Col","styled","div","height","minWidth","fontWeight","padding","display","alignItems","justifyContent","media","md","xl","Wrapper","HeaderCol","CheckboxColumn","column","handleCheck","setTriggered","React","useState","checkedList","setCheckedList","indeterminate","setIndeterminate","checkAll","setCheckAll","onChange","event","target","checked","data","headerRender","header","BaseCheckbox","Group","value","list","length","map","el","index","dataRender","NotificationsTypes","isLoading","setLoading","checkedElements","setCheckedElements","isTriggered","options","id","text","useCallback","mode","onFinish","setTimeout","notificationController","success","message","console","log","name","item","Description","BaseTypography","Text","Notifications","BaseCard","NotificationsPage","PageTitle"],"mappings":"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","file":"static/js/16.9a609b86.chunk.js","sourcesContent":["import React from 'react';\nimport { BaseForm, BaseFormInterface, BaseFormProps } from '@app/components/common/forms//BaseForm/BaseForm';\nimport { BaseButtonsGroup } from '@app/components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup';\nimport { BaseFormTitle } from '@app/components/common/forms/components/BaseFormTitle/BaseFormTitle';\nimport { BaseFormItem } from '@app/components/common/forms/components/BaseFormItem/BaseFormItem';\nimport { BaseFormList } from '@app/components/common/forms/components/BaseFormList/BaseFormList';\n\nexport interface BaseButtonsFormProps extends BaseFormProps {\n  isFieldsChanged: boolean;\n  setFieldsChanged?: (state: boolean) => void;\n  footer?: React.ReactElement;\n  loading?: boolean;\n}\n\nexport const BaseButtonsForm: BaseFormInterface<BaseButtonsFormProps> = ({\n  form,\n  isFieldsChanged,\n  setFieldsChanged,\n  footer,\n  loading = false,\n  children,\n  ...props\n}) => {\n  const [formDefault] = BaseForm.useForm();\n  const currentForm = form || formDefault;\n\n  const onCancel = () => {\n    currentForm?.resetFields();\n    setFieldsChanged && setFieldsChanged(false);\n  };\n\n  return (\n    <BaseForm form={currentForm} {...props}>\n      {children}\n      {isFieldsChanged && (footer || <BaseButtonsGroup loading={loading} onCancel={onCancel} />)}\n    </BaseForm>\n  );\n};\n\nBaseButtonsForm.Title = BaseFormTitle;\nBaseButtonsForm.Item = BaseFormItem;\nBaseButtonsForm.List = BaseFormList;\nBaseButtonsForm.useForm = BaseForm.useForm;\nBaseButtonsForm.Provider = BaseForm.Provider;\n","import React from 'react';\nimport { BaseButton, BaseButtonProps } from '@app/components/common/BaseButton/BaseButton';\nimport { useTranslation } from 'react-i18next';\nimport { BaseRow } from '@app/components/common/BaseRow/BaseRow';\nimport { BaseCol } from '@app/components/common/BaseCol/BaseCol';\n\ninterface BaseButtonsGroupProps extends BaseButtonProps {\n  className?: string;\n  onCancel: () => void;\n  loading?: boolean;\n}\n\nexport const BaseButtonsGroup: React.FC<BaseButtonsGroupProps> = ({ className, onCancel, loading, ...props }) => {\n  const { t } = useTranslation();\n\n  return (\n    <BaseRow className={className} gutter={[10, 10]} wrap={false}>\n      <BaseCol span={12}>\n        <BaseButton block type=\"ghost\" onClick={onCancel} {...props}>\n          {t('common.cancel')}\n        </BaseButton>\n      </BaseCol>\n      <BaseCol span={12}>\n        <BaseButton block type=\"primary\" loading={loading} htmlType=\"submit\" {...props}>\n          {t('common.save')}\n        </BaseButton>\n      </BaseCol>\n    </BaseRow>\n  );\n};\n","import styled from 'styled-components';\nimport { media } from '@app/styles/themes/constants';\n\nconst colStyles = {\n  height: '75px',\n  minWidth: '50px',\n  fontWeight: 600,\n  padding: '0.3125rem',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n};\n\nexport const Col = styled.div`\n  ${colStyles};\n\n  border-bottom: 1px solid rgba(var(--primary-rgb-color), 0.3);\n\n  @media only screen and ${media.md} {\n    justify-content: unset;\n    font-size: 1rem;\n    padding: 0.5rem;\n  }\n\n  @media only screen and ${media.xl} {\n    padding: 0.75rem;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n\n  & .ant-checkbox-wrapper {\n    color: inherit;\n    font: inherit;\n\n    & > .ant-checkbox > .ant-checkbox-inner {\n      border-radius: 3px;\n\n      border-color: var(--primary-color);\n    }\n  }\n\n  &:last-of-type {\n    ${Col} {\n      justify-content: unset;\n    }\n  }\n`;\n\nexport const HeaderCol = styled(Col)`\n  background: var(--secondary-background-color);\n\n  border-top: 1px solid rgba(var(--primary-rgb-color), 0.3);\n\n  color: var(--primary-color);\n\n  & .ant-checkbox-wrapper {\n    flex-wrap: wrap;\n    row-gap: 0.5rem;\n    justify-content: center;\n  }\n`;\n","import React from 'react';\nimport { Option } from '../interfaces';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport * as S from './CheckboxColumn.styles';\nimport { BaseCheckbox } from '@app/components/common/BaseCheckbox/BaseCheckbox';\n\ninterface CheckboxColumnProps {\n  column: Omit<Option, 'id'>;\n  handleCheck: (list: CheckboxValueType[]) => void;\n  setTriggered: (state: boolean) => void;\n}\n\nexport const CheckboxColumn: React.FC<CheckboxColumnProps> = ({ column, handleCheck, setTriggered }) => {\n  const [checkedList, setCheckedList] = React.useState<CheckboxValueType[]>([]);\n  const [indeterminate, setIndeterminate] = React.useState(false);\n  const [checkAll, setCheckAll] = React.useState(false);\n\n  const onChange = (list: CheckboxValueType[]) => {\n    setCheckedList(list);\n    setIndeterminate(!!list.length && list.length < column.data.length);\n    setCheckAll(list.length === column.data.length);\n    handleCheck(list);\n    setTriggered(true);\n  };\n\n  const onCheckAllChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCheckedList(event.target.checked ? column.data : []);\n    setIndeterminate(false);\n    setCheckAll(event.target.checked);\n    handleCheck(event.target.checked ? column.data : []);\n    setTriggered(true);\n  };\n\n  const props = {\n    indeterminate,\n    onChange: onCheckAllChange,\n    checked: checkAll,\n  };\n\n  return (\n    <S.Wrapper>\n      <S.HeaderCol>{column.headerRender ? column.headerRender(column.header, props) : column.header}</S.HeaderCol>\n      <BaseCheckbox.Group value={checkedList} onChange={onChange}>\n        {column.data.map((el, index) => (\n          <S.Col key={index}>{column.dataRender ? column.dataRender(el) : el}</S.Col>\n        ))}\n      </BaseCheckbox.Group>\n    </S.Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n\n  & + div {\n    margin-top: 2rem;\n  }\n`;\n","import React, { useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { CheckboxColumn } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/CheckboxColumn/CheckboxColumn';\nimport { Option } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/interfaces';\nimport * as S from './NotificationsTypes.styles';\nimport { BaseButtonsGroup } from '@app/components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup';\nimport { notificationController } from '@app/controllers/notificationController';\nimport { BaseCheckbox } from '@app/components/common/BaseCheckbox/BaseCheckbox';\n\ninterface Notifications {\n  1: string[];\n  2: string[];\n  3: string[];\n}\n\nexport const NotificationsTypes: React.FC = () => {\n  const { t } = useTranslation();\n  const [isLoading, setLoading] = useState(false);\n  const [checkedElements, setCheckedElements] = useState<Notifications>({\n    1: [],\n    2: [],\n    3: [],\n  });\n\n  const [isTriggered, setTriggered] = useState(false);\n\n  const options: Option[] = [\n    {\n      id: 1,\n      header: t('common.email'),\n      headerRender: (text, props) => <BaseCheckbox {...props}>{text}</BaseCheckbox>,\n      data: [\n        'emailMessages',\n        'emailMentions',\n        'emailReminders',\n        'emailAllNews',\n        'emailImportantNews',\n        'emailActionRequired',\n      ],\n      dataRender: (text) => <BaseCheckbox value={text} />,\n    },\n    {\n      id: 2,\n      header: t('profile.nav.notifications.push'),\n      headerRender: (text, props) => <BaseCheckbox {...props}>{text}</BaseCheckbox>,\n      data: ['pushMessages', 'pushMentions', 'pushReminders', 'pushAllNews', 'pushImportantNews', 'pushActionRequired'],\n      dataRender: (text) => <BaseCheckbox value={text} />,\n    },\n    {\n      id: 3,\n      header: t('profile.nav.notifications.SMS'),\n      headerRender: (text, props) => <BaseCheckbox {...props}>{text}</BaseCheckbox>,\n      data: ['smsMessages', 'smsMentions', 'smsReminders', 'smsAllNews', 'smsImportantNews', 'smsActionRequired'],\n      dataRender: (text) => <BaseCheckbox value={text} />,\n    },\n    {\n      id: 4,\n      header: t('profile.nav.notifications.activities'),\n      data: [\n        t('profile.nav.notifications.directMessages'),\n        t('profile.nav.notifications.mentions'),\n        t('profile.nav.notifications.reminders'),\n        t('profile.nav.notifications.allNews'),\n        t('profile.nav.notifications.importantNews'),\n        t('profile.nav.notifications.actionRequired'),\n      ],\n    },\n  ];\n\n  const handleCheck = useCallback(\n    (mode: number) => (list: CheckboxValueType[]) => {\n      setCheckedElements({ ...checkedElements, [mode]: list });\n    },\n    [checkedElements],\n  );\n\n  const onCancel = useCallback(() => {\n    setTriggered(false);\n  }, [setTriggered]);\n\n  const onFinish = useCallback(async () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setTriggered(false);\n      notificationController.success({ message: t('common.success') });\n      console.log(checkedElements);\n    }, 1000);\n  }, [setTriggered, checkedElements, t]);\n\n  return (\n    <BaseButtonsForm\n      name=\"notifications\"\n      onFinish={onFinish}\n      isFieldsChanged={isTriggered}\n      setFieldsChanged={setTriggered}\n      footer={<BaseButtonsGroup loading={isLoading} onCancel={onCancel} />}\n    >\n      <S.Wrapper>\n        {options.map((item) => (\n          <CheckboxColumn key={item.id} column={item} handleCheck={handleCheck(item.id)} setTriggered={setTriggered} />\n        ))}\n      </S.Wrapper>\n    </BaseButtonsForm>\n  );\n};\n","import { BaseTypography } from '@app/components/common/BaseTypography/BaseTypography';\nimport { media } from '@app/styles/themes/constants';\nimport styled from 'styled-components';\n\nexport const Description = styled(BaseTypography.Text)`\n  display: block;\n  font-size: 0.75rem;\n  margin-bottom: 1rem;\n\n  @media only screen and ${media.md} {\n    font-size: 1rem;\n    margin-bottom: 2rem;\n  }\n`;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { BaseCard } from '@app/components/common/BaseCard/BaseCard';\nimport { NotificationsTypes } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/NotificationsTypes/NotificationsTypes';\nimport * as S from './Notifications.styles';\n\nexport const Notifications: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <BaseCard>\n      <BaseButtonsForm.Item>\n        <BaseButtonsForm.Title>{t('profile.nav.notifications.settings')}</BaseButtonsForm.Title>\n      </BaseButtonsForm.Item>\n      <S.Description>{t('profile.nav.notifications.description')}</S.Description>\n      <NotificationsTypes />\n    </BaseCard>\n  );\n};\n","import React from 'react';\nimport { Notifications } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/Notifications/Notifications';\nimport { useTranslation } from 'react-i18next';\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\n\nconst NotificationsPage: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageTitle>{t('profile.nav.notifications.title')}</PageTitle>\n      <Notifications />\n    </>\n  );\n};\n\nexport default NotificationsPage;\n"],"sourceRoot":""}