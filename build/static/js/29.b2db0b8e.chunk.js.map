{"version":3,"sources":["components/bazon/catalog-components/SearchComponent.tsx","components/types/catalog/catalogTypes.ts","components/tables/fixedTable/FixedTable.tsx","pages/bazon-pages/catalog/Catalog.tsx"],"names":["options","value","SearchComponent","style","width","placeholder","filterOption","inputValue","option","toUpperCase","indexOf","columns","title","dataIndex","key","render","text","convertToDate","fixed","FixedTable","data","loading","tableRef","ref","dataSource","scroll","x","locale","emptyText","Catalog","useState","setData","setLoading","useRef","setBrandData","setModelData","fetchData","AxiosInstance","get","response","console","log","error","getBrands","getModels","useEffect","display","alignItems","justifyContent","marginBottom","gap","currentTableRef","current","filename","sheet","icon","ExportOutlined","SettingOutlined","Incomes"],"mappings":"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","file":"static/js/29.b2db0b8e.chunk.js","sourcesContent":["import React from 'react';\nimport { AutoComplete } from 'antd';\n\nconst options = [{ value: 'Burns Bay Road' }, { value: 'Downing Street' }, { value: 'Wall Street' }];\n\nconst SearchComponent: React.FC = () => (\n  <AutoComplete\n    style={{ width: 500 }}\n    options={options}\n    placeholder=\"Search by Cross Number\"\n    filterOption={(inputValue, option) => option!.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1}\n  />\n);\n\nexport default SearchComponent;\n","import { convertToDate } from '@app/utils/utils';\nimport type { ColumnsType } from 'antd/es/table';\n\nexport interface Autopart {\n  autopart_id: number;\n  brand_id: number | null;\n  model_id: number | null;\n  generation_id: number;\n  manufacturer_id: number | null;\n  name: string;\n  front_back: string | null;\n  left_right: string;\n  number_of_part: number | null;\n  year: number | null;\n  color: string | null;\n  comment: string | null;\n  cross_number: string | null;\n  note: string | null;\n  marking: string | null;\n  is_archive: boolean;\n  not_for_export: boolean;\n  site_link: string | null;\n  video: string | null;\n  old_bar_code: string | null;\n  old_data: string | null;\n  is_used: string;\n  status: string;\n  created_at: string;\n  updated_at: string;\n  model: {\n    id: number;\n    name: string;\n    model_id: number;\n  } | null;\n  brand: string | null;\n  generation: {\n    id: number;\n    name: string;\n    model_id: number;\n  };\n}\n\nexport interface GetBrands {\n  id: number;\n  name: string;\n  value: string;\n  label: string;\n  number_of_part: number;\n}\n\nexport interface CarModel {\n  id: number;\n  name: string;\n  brand_id: number;\n}\n\nexport const columns: ColumnsType<Autopart> = [\n  // {\n  //   title: 'Autopart ID',\n  //   dataIndex: 'autopart_id',\n  //   key: 'autopart_id',\n  //   width: 100,\n  // },\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    width: 150,\n  },\n  {\n    title: 'Front/Back',\n    dataIndex: 'front_back',\n    key: 'front_back',\n    width: 100,\n  },\n  {\n    title: 'Left/Right',\n    dataIndex: 'left_right',\n    key: 'left_right',\n    width: 100,\n  },\n  {\n    title: 'Number of Part',\n    dataIndex: 'number_of_part',\n    key: 'number_of_part',\n    width: 100,\n  },\n  {\n    title: 'Year',\n    dataIndex: 'year',\n    key: 'year',\n    width: 100,\n  },\n  {\n    title: 'Color',\n    dataIndex: 'color',\n    key: 'color',\n    width: 100,\n  },\n  {\n    title: 'Comment',\n    dataIndex: 'comment',\n    key: 'comment',\n    width: 150,\n  },\n  {\n    title: 'Cross Number',\n    dataIndex: 'cross_number',\n    key: 'cross_number',\n    width: 150,\n  },\n  {\n    title: 'Note',\n    dataIndex: 'note',\n    key: 'note',\n    width: 150,\n  },\n  {\n    title: 'Marking',\n    dataIndex: 'marking',\n    key: 'marking',\n    width: 150,\n  },\n  {\n    title: 'Is Archive',\n    dataIndex: 'is_archive',\n    key: 'is_archive',\n    width: 100,\n  },\n  {\n    title: 'Not for Export',\n    dataIndex: 'not_for_export',\n    key: 'not_for_export',\n    width: 120,\n  },\n  {\n    title: 'Site Link',\n    dataIndex: 'site_link',\n    key: 'site_link',\n    width: 150,\n  },\n  {\n    title: 'Video',\n    dataIndex: 'video',\n    key: 'video',\n    width: 150,\n  },\n  {\n    title: 'Old Bar Code',\n    dataIndex: 'old_bar_code',\n    key: 'old_bar_code',\n    width: 150,\n  },\n  {\n    title: 'Old Data',\n    dataIndex: 'old_data',\n    key: 'old_data',\n    width: 150,\n  },\n  {\n    title: 'Is Used',\n    dataIndex: 'is_used',\n    key: 'is_used',\n    width: 100,\n  },\n  {\n    title: 'Status',\n    dataIndex: 'status',\n    key: 'status',\n    width: 100,\n  },\n  {\n    title: 'Created At',\n    dataIndex: 'created_at',\n    key: 'created_at',\n    width: 150,\n    render: (text: string) => convertToDate(text),\n  },\n  {\n    title: 'Updated At',\n    dataIndex: 'updated_at',\n    key: 'updated_at',\n    width: 150,\n    render: (text: string) => convertToDate(text),\n  },\n  {\n    title: 'Model ID',\n    dataIndex: ['model', 'id'],\n    key: 'model_id',\n    width: 100,\n  },\n  {\n    title: 'Model Name',\n    dataIndex: ['model', 'name'],\n    key: 'model_name',\n    width: 150,\n  },\n\n  {\n    title: 'Generation ID',\n    dataIndex: ['generation', 'id'],\n    key: 'generation_id',\n    width: 100,\n  },\n  {\n    title: 'Generation Name',\n    dataIndex: ['generation', 'name'],\n    key: 'generation_name',\n    width: 150,\n    fixed: 'right',\n  },\n];\n\nexport interface FixedTableProps {\n  data: Autopart[];\n  loading: boolean;\n  tableRef: any;\n}\n","import { Table } from 'antd';\nimport { FixedTableProps, columns } from '@app/components/types/catalog/catalogTypes';\n\nconst FixedTable: React.FC<FixedTableProps> = ({ data, loading, tableRef }) => {\n  return (\n    <Table\n      ref={tableRef}\n      columns={columns}\n      dataSource={data}\n      scroll={{ x: 5500 }}\n      loading={loading}\n      locale={{ emptyText: 'No data found' }}\n    />\n  );\n};\n\nexport default FixedTable;\n","import { FC, useEffect, useRef, useState } from 'react';\nimport { Button } from 'antd';\nimport { ExportOutlined, SettingOutlined } from '@ant-design/icons';\nimport SearchComponent from '@app/components/bazon/catalog-components/SearchComponent';\nimport FixedTable from '@app/components/tables/fixedTable/FixedTable';\nimport { Autopart, CarModel, GetBrands } from '@app/components/types/catalog/catalogTypes';\nimport { DownloadTableExcel } from 'react-export-table-to-excel';\nimport Incomes from '../incomes/Incomes';\nimport { AxiosInstance } from '@app/api/axios/AxiosInstance';\n\nconst Catalog: FC = () => {\n  const [data, setData] = useState<Autopart[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const tableRef = useRef(null);\n  const [brandData, setBrandData] = useState<GetBrands[]>([]);\n  const [modelData, setModelData] = useState<CarModel[]>([]);\n  const [query, setQuery] = useState('');\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      const response = await AxiosInstance.get<Autopart[]>('autoparts/');\n      setData(response.data);\n      console.log(response.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  //  useEffect(() => {\n  //    const fetchData = async () => {\n  //      const res = await AxiosInstance.get(`autoparts/q=${query}`);\n  //      setData(res.data);\n  //    };\n  //    if (query.length === 0 || query.length > 2) fetchData();\n  //  }, [query]);\n\n  //  const fetchData = async () => {\n  //    try {\n  //      setLoading(true);\n  //      const response = await AxiosInstance.get<Autopart[]>(`autoparts/?q=${query}`);\n  //      setData(response.data);\n  //      console.log(response.data);\n  //    } catch (error) {\n  //      console.error('Error fetching data:', error);\n  //    } finally {\n  //      setLoading(false);\n  //    }\n  //  };\n\n  const getBrands = async () => {\n    try {\n      setLoading(true);\n      const response = await AxiosInstance.get<GetBrands[]>('/options/brands');\n      setBrandData(response.data);\n      console.log(response.data);\n    } catch (error) {\n      console.error('Error fetching brands:', error); // Improved error logging\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getModels = async () => {\n    try {\n      setLoading(true);\n      const response = await AxiosInstance.get<CarModel[]>('/options/models');\n      setModelData(response.data);\n      console.log(response.data);\n    } catch (error) {\n      console.error('Error fetching models:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n    getBrands();\n    getModels();\n  }, []);\n\n  return (\n    <>\n      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 50 }}>\n        <SearchComponent />\n        {/* <SearchComponent setQuery={setQuery} /> */}\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', gap: 20 }}>\n          <DownloadTableExcel currentTableRef={tableRef.current} filename=\"autoparts-table\" sheet=\"autoparts\">\n            <Button icon={<ExportOutlined />}>Export Table Data</Button>\n          </DownloadTableExcel>\n          <Button loading={loading} icon={<SettingOutlined />}>\n            Columns Manager\n          </Button>\n          <Incomes />\n        </div>\n      </div>\n\n      <FixedTable data={data} tableRef={tableRef} loading={loading} />\n    </>\n  );\n};\n\nexport default Catalog;\n"],"sourceRoot":""}