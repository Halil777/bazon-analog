{"version":3,"sources":["components/bazon/catalog-components/SearchComponent.tsx","components/types/catalog/catalogTypes.ts","components/tables/fixedTable/UpdateTable.tsx","components/tables/fixedTable/FixedTable.tsx","pages/bazon-pages/catalog/Catalog.tsx"],"names":["options","value","SearchComponent","style","width","placeholder","filterOption","inputValue","option","toUpperCase","indexOf","columns","title","dataIndex","key","render","text","convertToDate","fixed","UpdateTable","React","isDrawerOpen","setIsDrawerOpen","toggleDrawer","open","list","role","onClick","onKeyDown","List","map","index","ListItem","disablePadding","ListItemButton","ListItemIcon","ListItemText","primary","Divider","type","Drawer","anchor","onClose","FixedTable","data","loading","tableRef","fetchData","useState","selectedRecord","setSelectedRecord","rowSelection","onSelect","record","selected","handleModalCancel","ref","dataSource","scroll","x","locale","emptyText","onRow","handleEdit","visible","onCancel","footer","Stack","direction","spacing","justifyContent","marginRight","danger","autopart_id","AxiosInstance","delete","then","response","console","log","notificationController","success","message","catch","error","name","Catalog","setData","setLoading","useRef","setBrandData","setModelData","get","autopartResponse","autopartData","storageResponse","storageData","mergedData","autopart","storageInfo","find","storage","id","storage_id","getBrands","getModels","useEffect","display","alignItems","marginBottom","gap","currentTableRef","current","filename","sheet","icon","ExportOutlined","SettingOutlined","Incomes"],"mappings":"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","file":"static/js/29.fb091b13.chunk.js","sourcesContent":["import React from 'react';\nimport { AutoComplete } from 'antd';\n\nconst options = [{ value: 'Burns Bay Road' }, { value: 'Downing Street' }, { value: 'Wall Street' }];\n\nconst SearchComponent: React.FC = () => (\n  <AutoComplete\n    style={{ width: 500 }}\n    options={options}\n    placeholder=\"Search by Cross Number\"\n    filterOption={(inputValue, option) => option!.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1}\n  />\n);\n\nexport default SearchComponent;\n","import { convertToDate } from '@app/utils/utils';\nimport type { ColumnsType } from 'antd/es/table';\n\nexport interface Autopart {\n  id: number;\n  autopart_id: number;\n  brand_id: number | null;\n  model_id: number | null;\n  generation_id: number;\n  manufacturer_id: number | null;\n  name: string;\n  front_back: string | null;\n  left_right: string;\n  number_of_part: number | null;\n  year: number | null;\n  color: string | null;\n  comment: string | null;\n  cross_number: string | null;\n  note: string | null;\n  marking: string | null;\n  is_archive: boolean;\n  not_for_export: boolean;\n  site_link: string | null;\n  video: string | null;\n  old_bar_code: string | null;\n  old_data: string | null;\n  is_used: string;\n  status: string;\n  created_at: string;\n  updated_at: string;\n  model: {\n    id: number;\n    name: string;\n    model_id: number;\n  } | null;\n  brand: string | null;\n  generation: {\n    id: number;\n    name: string;\n    model_id: number;\n  };\n  storage_id: number | null;\n  storage?: {\n    id: number;\n    name_tm: string;\n    name_en: string;\n    name_ru: string;\n    website: string | null;\n    phone: string | null;\n    abbr: string | null;\n    description_tm: string | null;\n    description_en: string | null;\n    description_ru: string | null;\n    bar_code_prefix: string | null;\n    is_hidden: boolean;\n    is_issue_point: boolean;\n    is_income_point: boolean;\n    created_by: number;\n    updated_by: number | null;\n    created_at: string;\n    updated_at: string;\n    creator: {\n      id: number;\n      name: string;\n      username: string;\n      email: string;\n      age: number;\n      password: string;\n      gender: string;\n      roleId: number;\n      updated_at: string;\n      created_at: string;\n      deleted: boolean;\n    };\n    updater: {\n      // properties of updater\n    } | null;\n  } | null;\n}\n\nexport interface GetBrands {\n  id: number;\n  name: string;\n  value: string;\n  label: string;\n  number_of_part: number;\n}\n\nexport interface CarModel {\n  id: number;\n  name: string;\n  brand_id: number;\n}\n\nexport const columns: ColumnsType<Autopart> = [\n  // {\n  //   title: 'Autopart ID',\n  //   dataIndex: 'autopart_id',\n  //   key: 'autopart_id',\n  //   width: 100,\n  // },\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    width: 150,\n  },\n  {\n    title: 'Front/Back',\n    dataIndex: 'front_back',\n    key: 'front_back',\n    width: 100,\n  },\n  {\n    title: 'Left/Right',\n    dataIndex: 'left_right',\n    key: 'left_right',\n    width: 100,\n  },\n  {\n    title: 'Number of Part',\n    dataIndex: 'number_of_part',\n    key: 'number_of_part',\n    width: 100,\n  },\n  {\n    title: 'Year',\n    dataIndex: 'year',\n    key: 'year',\n    width: 100,\n  },\n  {\n    title: 'Color',\n    dataIndex: 'color',\n    key: 'color',\n    width: 100,\n  },\n  {\n    title: 'Comment',\n    dataIndex: 'comment',\n    key: 'comment',\n    width: 150,\n  },\n  {\n    title: 'Cross Number',\n    dataIndex: 'cross_number',\n    key: 'cross_number',\n    width: 150,\n  },\n  {\n    title: 'Note',\n    dataIndex: 'note',\n    key: 'note',\n    width: 150,\n  },\n  {\n    title: 'Marking',\n    dataIndex: 'marking',\n    key: 'marking',\n    width: 150,\n  },\n  {\n    title: 'Is Archive',\n    dataIndex: 'is_archive',\n    key: 'is_archive',\n    width: 100,\n  },\n  {\n    title: 'Not for Export',\n    dataIndex: 'not_for_export',\n    key: 'not_for_export',\n    width: 120,\n  },\n  {\n    title: 'Site Link',\n    dataIndex: 'site_link',\n    key: 'site_link',\n    width: 150,\n  },\n  {\n    title: 'Video',\n    dataIndex: 'video',\n    key: 'video',\n    width: 150,\n  },\n  {\n    title: 'Old Bar Code',\n    dataIndex: 'old_bar_code',\n    key: 'old_bar_code',\n    width: 150,\n  },\n  {\n    title: 'Old Data',\n    dataIndex: 'old_data',\n    key: 'old_data',\n    width: 150,\n  },\n  {\n    title: 'Is Used',\n    dataIndex: 'is_used',\n    key: 'is_used',\n    width: 100,\n  },\n  {\n    title: 'Status',\n    dataIndex: 'status',\n    key: 'status',\n    width: 100,\n  },\n  {\n    title: 'Created At',\n    dataIndex: 'created_at',\n    key: 'created_at',\n    width: 150,\n    render: (text: string) => convertToDate(text),\n  },\n  {\n    title: 'Updated At',\n    dataIndex: 'updated_at',\n    key: 'updated_at',\n    width: 150,\n    render: (text: string) => convertToDate(text),\n  },\n  {\n    title: 'Model ID',\n    dataIndex: ['model', 'id'],\n    key: 'model_id',\n    width: 100,\n  },\n  {\n    title: 'Model Name',\n    dataIndex: ['model', 'name'],\n    key: 'model_name',\n    width: 150,\n  },\n\n  {\n    title: 'Generation ID',\n    dataIndex: ['generation', 'id'],\n    key: 'generation_id',\n    width: 100,\n  },\n  {\n    title: 'Generation Name',\n    dataIndex: ['generation', 'name'],\n    key: 'generation_name',\n    width: 150,\n  },\n  {\n    title: 'Storage Name',\n    dataIndex: ['storage', 'name_tm'], // Use the correct property based on your storage structure\n    key: 'storage_name',\n    width: 150,\n    fixed: 'right',\n  },\n];\n\nexport interface FixedTableProps {\n  data: Autopart[];\n  loading: boolean;\n  tableRef: any;\n  fetchData: () => Promise<void>;\n}\n","import * as React from 'react';\nimport Drawer from '@mui/material/Drawer';\nimport List from '@mui/material/List';\nimport Divider from '@mui/material/Divider';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport InboxIcon from '@mui/icons-material/MoveToInbox';\nimport MailIcon from '@mui/icons-material/Mail';\nimport { Button } from 'antd';\n\nexport default function UpdateTable() {\n  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);\n\n  const toggleDrawer = (open: boolean) => () => {\n    setIsDrawerOpen(open);\n  };\n\n  const list = (\n    <div style={{ width: '50vw' }} role=\"presentation\" onClick={toggleDrawer(false)} onKeyDown={toggleDrawer(false)}>\n      <List>\n        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n          <ListItem key={text} disablePadding>\n            <ListItemButton>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItemButton>\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <List>\n        {['All mail', 'Trash', 'Spam'].map((text, index) => (\n          <ListItem key={text} disablePadding>\n            <ListItemButton>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItemButton>\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n\n  return (\n    <div>\n      {/* <Button onClick={toggleDrawer(true)}>Open Right Drawer</Button> */}\n      <Button type=\"primary\" onClick={toggleDrawer(true)}>\n        Update\n      </Button>\n      <Drawer anchor=\"right\" open={isDrawerOpen} onClose={toggleDrawer(false)}>\n        {list}\n      </Drawer>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Table, Button, Modal } from 'antd';\nimport { Autopart, FixedTableProps, columns } from '@app/components/types/catalog/catalogTypes';\nimport { AxiosInstance } from '@app/api/axios/AxiosInstance';\nimport { notificationController } from '@app/controllers/notificationController';\nimport { Drawer, Stack, Typography } from '@mui/material';\nimport UpdateTable from './UpdateTable';\n\nconst FixedTable: React.FC<FixedTableProps> = ({ data, loading, tableRef, fetchData }) => {\n  const [selectedRecord, setSelectedRecord] = useState<Autopart | null>(null);\n  const [isDrawerOpen, setIsDrawerOpen] = useState<boolean>(false);\n\n  const handleEdit = (record: Autopart) => {\n    setSelectedRecord(record);\n  };\n\n  const openDrawer = () => {\n    setIsDrawerOpen(true);\n  };\n\n  const closeDrawer = () => {\n    setIsDrawerOpen(false);\n  };\n\n  const rowSelection = {\n    onSelect: (record: Autopart, selected: boolean) => {\n      if (selected) {\n        setSelectedRecord(record);\n      } else {\n        setSelectedRecord(null);\n      }\n    },\n  };\n\n  const onRow = (record: Autopart) => {\n    return {\n      onClick: () => handleEdit(record),\n    };\n  };\n\n  const handleModalCancel = () => {\n    setSelectedRecord(null);\n  };\n\n  const handleUpdate = () => {\n    console.log('Updating record:', selectedRecord);\n    handleModalCancel();\n    openDrawer();\n  };\n\n  const deleteAutoPart = (autopart_id: number) => {\n    AxiosInstance.delete('autoparts/' + autopart_id)\n      .then((response) => {\n        console.log('Delete successful', response);\n        handleModalCancel();\n        fetchData();\n        notificationController.success({\n          message: 'Successfully Deleted auto part',\n        });\n      })\n      .catch((error) => {\n        console.error('Error deleting record', error.response);\n      });\n  };\n\n  return (\n    <>\n      <Table\n        ref={tableRef}\n        columns={columns}\n        dataSource={data}\n        scroll={{ x: 5500 }}\n        loading={loading}\n        locale={{ emptyText: 'No data found' }}\n        rowSelection={rowSelection}\n        onRow={onRow}\n      />\n      <Modal\n        title=\"Actions\"\n        visible={!!selectedRecord}\n        onCancel={handleModalCancel}\n        footer={[\n          <Stack direction=\"row\" spacing={3} justifyContent={'flex-end'} key=\"footer-buttons\">\n            <Button key=\"cancel\" style={{ marginRight: 20 }} onClick={handleModalCancel}>\n              Cancel\n            </Button>\n            <Button key=\"delete\" danger onClick={() => deleteAutoPart(selectedRecord ? selectedRecord.autopart_id : 0)}>\n              Delete\n            </Button>\n            <UpdateTable key={'update'} />\n          </Stack>,\n        ]}\n      >\n        {/* Display additional information or confirmation message */}\n        {selectedRecord && (\n          <div>\n            <p>{`Selected record: ${selectedRecord.name}`}</p>\n            {/* Add more details or confirmation messages as needed */}\n          </div>\n        )}\n      </Modal>\n    </>\n  );\n};\n\nexport default FixedTable;\n","import { FC, SetStateAction, useEffect, useRef, useState } from 'react';\nimport { Button } from 'antd';\nimport { ExportOutlined, SettingOutlined } from '@ant-design/icons';\nimport SearchComponent from '@app/components/bazon/catalog-components/SearchComponent';\nimport FixedTable from '@app/components/tables/fixedTable/FixedTable';\nimport { Autopart, CarModel, GetBrands } from '@app/components/types/catalog/catalogTypes';\nimport { DownloadTableExcel } from 'react-export-table-to-excel';\nimport Incomes from '../incomes/Incomes';\nimport { AxiosInstance } from '@app/api/axios/AxiosInstance';\n\nconst Catalog: FC = () => {\n  const [data, setData] = useState<Autopart[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const tableRef = useRef(null);\n  const [brandData, setBrandData] = useState<GetBrands[]>([]);\n  const [modelData, setModelData] = useState<CarModel[]>([]);\n\n  // const fetchData = async () => {\n  //   try {\n  //     setLoading(true);\n  //     const response = await AxiosInstance.get<Autopart[]>('autoparts/');\n  //     setData(response.data);\n  //     console.log(response.data);\n  //   } catch (error) {\n  //     console.error('Error fetching data:', error);\n  //   } finally {\n  //     setLoading(false);\n  //   }\n  // };\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n\n      // Fetch autopart data\n      const autopartResponse = await AxiosInstance.get<Autopart[]>('autoparts/');\n      const autopartData = autopartResponse.data;\n\n      // Fetch storage data\n      const storageResponse = await AxiosInstance.get<Storage[]>('/storages');\n      const storageData = storageResponse.data;\n\n      // Merge autopart and storage data based on storage_id\n      const mergedData = autopartData.map((autopart) => {\n        const storageInfo = storageData.find((storage) => storage.id === autopart.storage_id);\n        return { ...autopart, storage: storageInfo };\n      });\n\n      // Update setData line to explicitly specify the type\n      setData(mergedData as unknown as SetStateAction<Autopart[]>);\n\n      console.log(mergedData);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getBrands = async () => {\n    try {\n      setLoading(true);\n      const response = await AxiosInstance.get<GetBrands[]>('/options/brands');\n      setBrandData(response.data);\n      console.log(response.data);\n    } catch (error) {\n      console.error('Error fetching brands:', error); // Improved error logging\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getModels = async () => {\n    try {\n      setLoading(true);\n      const response = await AxiosInstance.get<CarModel[]>('/options/models');\n      setModelData(response.data);\n      console.log(response.data);\n    } catch (error) {\n      console.error('Error fetching models:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n    getBrands();\n    getModels();\n  }, []);\n\n  return (\n    <>\n      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 50 }}>\n        <SearchComponent />\n        {/* <SearchComponent setQuery={setQuery} /> */}\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', gap: 20 }}>\n          <DownloadTableExcel currentTableRef={tableRef.current} filename=\"autoparts-table\" sheet=\"autoparts\">\n            <Button icon={<ExportOutlined />}>Export Table Data</Button>\n          </DownloadTableExcel>\n          <Button loading={loading} icon={<SettingOutlined />}>\n            Columns Manager\n          </Button>\n          <Incomes />\n        </div>\n      </div>\n\n      <FixedTable data={data} fetchData={fetchData} tableRef={tableRef} loading={loading} />\n    </>\n  );\n};\n\nexport default Catalog;\n"],"sourceRoot":""}