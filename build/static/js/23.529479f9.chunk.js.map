{"version":3,"sources":["pages/maps/maps.styles.ts","../node_modules/react-leaflet/lib/TileLayer.js","../node_modules/@react-leaflet/core/lib/grid-layer.js","pages/maps/LeafletMapsPage/LeafletMapsPage.tsx"],"names":["MapsCard","styled","BaseCard","TileLayer","createTileLayerComponent","context","url","options","layer","LeafletTileLayer","withPane","createElementObject","props","prevProps","opacity","zIndex","setOpacity","setZIndex","LeafletMaps","t","useTranslation","PageTitle","title","MapContainer","center","zoom","zoomControl","minZoom","maxZoom","style","height","attribution"],"mappings":"4LAGaA,EAAWC,YAAOC,IAAPD,CAAgB,iH,kICD3BE,EAAYC,aAAyB,SAAyB,EAAsBC,GAAS,IAA7BC,EAAG,EAAHA,IAASC,EAAO,iBACnFC,EAAQ,IAAIC,YAAiBH,EAAKI,YAASH,EAASF,IAC1D,OAAOM,YAAoBH,EAAOH,EACtC,ICLO,SAAyBG,EAAOI,EAAOC,GAC1C,IAAQC,EAAsBF,EAAtBE,QAAUC,EAAYH,EAAZG,OACH,MAAXD,GAAmBA,IAAYD,EAAUC,SACzCN,EAAMQ,WAAWF,GAEP,MAAVC,GAAkBA,IAAWF,EAAUE,QACvCP,EAAMS,UAAUF,EAExB,I,yBC4BeG,UA1Be,WAC5B,IAAQC,EAAMC,cAAND,EAGR,OACE,qCACE,cAACE,EAAA,EAAS,UAAEF,EAAE,uBACd,cAAC,IAAU,CAACG,MAAOH,EAAE,qBAAqB,SACxC,cAACI,EAAA,EAAY,CACXC,OAP6B,CAAC,UAAW,YAQzCC,KAAM,EACNC,aAAa,EACbC,QAAS,EACTC,QAAS,GACTC,MAAO,CAAEC,OAAQ,QAAS,SAE1B,cAAC3B,EAAS,CACR4B,YAAY,wFACZzB,IAAI,6DAMhB,C","file":"static/js/23.529479f9.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { BaseCard } from '@app/components/common/BaseCard/BaseCard';\n\nexport const MapsCard = styled(BaseCard)`\n  height: 70vh;\n  overflow-y: auto;\n\n  .leaflet-container {\n    z-index: 0;\n  }\n`;\n","import { createElementObject, createTileLayerComponent, updateGridLayer, withPane } from '@react-leaflet/core';\nimport { TileLayer as LeafletTileLayer } from 'leaflet';\nexport const TileLayer = createTileLayerComponent(function createTileLayer({ url , ...options }, context) {\n    const layer = new LeafletTileLayer(url, withPane(options, context));\n    return createElementObject(layer, context);\n}, updateGridLayer);\n","export function updateGridLayer(layer, props, prevProps) {\n    const { opacity , zIndex  } = props;\n    if (opacity != null && opacity !== prevProps.opacity) {\n        layer.setOpacity(opacity);\n    }\n    if (zIndex != null && zIndex !== prevProps.zIndex) {\n        layer.setZIndex(zIndex);\n    }\n}\n","import React from 'react';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport { LatLngExpression } from 'leaflet';\n\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\nimport * as S from '@app/pages/maps/maps.styles';\n\nconst LeafletMaps: React.FC = () => {\n  const { t } = useTranslation();\n  const MAP_CENTER: LatLngExpression = [59.333772, 18.0644457];\n\n  return (\n    <>\n      <PageTitle>{t('common.leafletMap')}</PageTitle>\n      <S.MapsCard title={t('common.leafletMap')}>\n        <MapContainer\n          center={MAP_CENTER}\n          zoom={6}\n          zoomControl={false}\n          minZoom={1}\n          maxZoom={10}\n          style={{ height: '100%' }}\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n        </MapContainer>\n      </S.MapsCard>\n    </>\n  );\n};\n\nexport default LeafletMaps;\n"],"sourceRoot":""}